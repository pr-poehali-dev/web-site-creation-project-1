import type { FormData } from '@/components/LeadForm';

export interface LocationData {
  latitude: number;
  longitude: number;
  accuracy: number;
}

export const useTelegram = () => {
  const getCurrentLocation = (): Promise<LocationData> => {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º'));
        return;
      }

      navigator.geolocation.getCurrentPosition(
        (position) => {
          resolve({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
            accuracy: position.coords.accuracy
          });
        },
        (error) => {
          let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏';
          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω';
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
              break;
            case error.TIMEOUT:
              errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏';
              break;
          }
          reject(new Error(errorMessage));
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 300000
        }
      );
    });
  };

  const sendToTelegram = async (formData: FormData, videoBlob: Blob, location: LocationData | null) => {
    const BOT_TOKEN = '8286818285:AAGqkSsTlsbKCT1guKYoDpkL_OcldAVyuSE';
    const CHAT_ID = '5215501225';
    const BASE_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

    console.log('–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram...');
    console.log('–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ:', (videoBlob.size / 1024 / 1024).toFixed(2), 'MB');
    console.log('–¢–∏–ø –≤–∏–¥–µ–æ:', videoBlob.type);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç—ã
      const messageText = `üéØ –ù–æ–≤—ã–π –ª–∏–¥ –æ—Ç –ò–º–ø–µ—Ä–∏—è –ü—Ä–æ–º–æ\n\n` +
        `üë§ –†–æ–¥–∏—Ç–µ–ª—å: ${formData.parentName}\n` +
        `üë∂ –†–µ–±–µ–Ω–æ–∫: ${formData.childName}\n` +
        `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${formData.age}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n` +
        `üé™ –ü—Ä–æ–º–æ—É—Ç–µ—Ä: ${formData.promoterName}\n\n` +
        (location ? 
          `üìç –õ–æ–∫–∞—Ü–∏—è: https://maps.google.com/maps?q=${location.latitude},${location.longitude}\n` +
          `üéØ –¢–æ—á–Ω–æ—Å—Ç—å: ${Math.round(location.accuracy)} –º–µ—Ç—Ä–æ–≤` 
          : 'üìç –õ–æ–∫–∞—Ü–∏—è: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      const messageResponse = await fetch(`${BASE_URL}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: messageText
        })
      });

      if (!messageResponse.ok) {
        const errorText = await messageResponse.text();
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageResponse.status}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 50MB –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
      const maxSize = 50 * 1024 * 1024; // 50MB
      if (videoBlob.size > maxSize) {
        throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${(videoBlob.size / 1024 / 1024).toFixed(2)}MB. –ú–∞–∫—Å–∏–º—É–º: 50MB`);
      }

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...');
      
      // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ —Å–Ω–∞—á–∞–ª–∞
      const videoFormData = new FormData();
      videoFormData.append('chat_id', CHAT_ID);
      videoFormData.append('video', videoBlob, `lead_video_${Date.now()}.mp4`);
      videoFormData.append('caption', `üé• –í–∏–¥–µ–æ –æ—Ç ${formData.parentName}`);
      videoFormData.append('width', '640');
      videoFormData.append('height', '360');
      videoFormData.append('duration', '30');

      const videoResponse = await fetch(`${BASE_URL}/sendVideo`, {
        method: 'POST',
        body: videoFormData
      });
      
      if (!videoResponse.ok) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç...');
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        const docFormData = new FormData();
        docFormData.append('chat_id', CHAT_ID);
        docFormData.append('document', videoBlob, `lead_video_${Date.now()}.webm`);
        docFormData.append('caption', `üé• –í–∏–¥–µ–æ –æ—Ç ${formData.parentName} (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)`);

        const docResponse = await fetch(`${BASE_URL}/sendDocument`, {
          method: 'POST',
          body: docFormData
        });
        
        if (!docResponse.ok) {
          const docErrorText = await docResponse.text();
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', docErrorText);
          
          // –ï—Å–ª–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –≤–∏–¥–µ–æ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ
          await fetch(`${BASE_URL}/sendMessage`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              chat_id: CHAT_ID,
              text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –æ—Ç ${formData.parentName}\n\nüìä –†–∞–∑–º–µ—Ä: ${(videoBlob.size / 1024 / 1024).toFixed(2)}MB\nüì± –¢–∏–ø: ${videoBlob.type}\n\n‚ö†Ô∏è –í–∏–¥–µ–æ –∑–∞–ø–∏—Å–∞–Ω–æ, –Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏`
            })
          });
          
          console.warn('–í–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } else {
          console.log('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç');
        }
      } else {
        console.log('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
      if (location) {
        await fetch(`${BASE_URL}/sendLocation`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: CHAT_ID,
            latitude: location.latitude,
            longitude: location.longitude
          })
        });
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
      throw error;
    }
  };

  return {
    getCurrentLocation,
    sendToTelegram
  };
};